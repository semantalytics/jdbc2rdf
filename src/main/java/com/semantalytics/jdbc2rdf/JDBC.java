package com.semantalytics.jdbc2rdf;

import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Namespace;
import org.eclipse.rdf4j.model.ValueFactory;
import org.eclipse.rdf4j.model.impl.SimpleNamespace;
import org.eclipse.rdf4j.model.impl.SimpleValueFactory;

public class JDBC {

    public static final String NAMESPACE ="http://semantalytics.com/2016/12/ns/jdbc/";
    public static final String PREFIX ="jdbc:";
    public static final Namespace NS = new SimpleNamespace(PREFIX, NAMESPACE);

    public static IRI ALL_PROCEEDURES_ARE_CALLABLE;
    public static IRI ALL_TABLES_ARE_SELECTABLE;
    public static IRI AUTO_COMMIT_FAILURE_CLOSES_ALL_RESULTS_SETS;
    public static IRI DATA_DEFINITION_CAUSES_TRANSACTION_COMMIT;
    public static IRI DATA_DEFINITION_IGNORED_IN_TRANSACTIONS;
    public static IRI DOES_MAX_ROW_SIZE_INCLUDE_BLOBS;
    public static IRI JDBC_MAJOR_VERSION;
    public static IRI JDBC_MINOR_VERSION;
    public static IRI MAX_BINARY_LITERAL_LENGTH;
    public static IRI MAX_CATALOG_NAME_LENGTH;
    public static IRI MAX_CHAR_LITERAL_LENGTH;
    public static IRI MAX_COLUMN_NAME_LENGTH;
    public static IRI MAX_COLUMNS_IN_GROUP_BY;
    public static IRI MAX_COLUMNS_IN_INDEX;
    public static IRI MAX_COLUMNS_IN_ORDER_BY;
    public static IRI MAX_COLUMNS_IN_SELECT;
    public static IRI MAX_COLUMNS_IN_TABLE;
    public static IRI MAX_CONNECTIONS;
    public static IRI CATALOG_SEPARATOR;
    public static IRI CATALOG_TERM;
    public static IRI DATABASE_MAJOR_VERSION;
    public static IRI DATABASE_MINOR_VERSION;
    public static IRI DATABASE_PRODUCT_NAME;
    public static IRI DATABASE_PRODUCT_VERSION;
    public static IRI DEFAULT_TRANSACTION_ISOLATION;
    public static IRI DRIVER_MAJOR_VERSION;
    public static IRI DRIVER_MINOR_VERSION;
    public static IRI DRIVER_NAME;
    public static IRI DRIVER_VERSION;
    public static IRI EXTRA_NAME_CHARACTERS;
    public static IRI IDENTIFIER_QUOTE_STRING;
    public static IRI MAX_CURSOR_NAME_LENGTH;
    public static IRI MAX_INDEX_LENGTH;
    public static IRI MAX_PROCEDURE_NAME_LENGTH;
    public static IRI MAX_ROW_SIZE;
    public static IRI MAX_SCHEMA_NAME_LENGTH;
    public static IRI MAX_STATEMENTLENGTH;
    public static IRI MAX_STATEMENTS;
    public static IRI MAX_TABLE_NAME_LENGTH;
    public static IRI MAX_TABLES_IN_SELECT;
    public static IRI MAX_USER_NAME_LENGTH;
    public static IRI NUMERIC_FUNCTIONS;
    public static IRI PROCEDURE_TERM;
    public static IRI RESULT_SET_HOLDABILITY;
    public static IRI SCHEMA_TERM;
    public static IRI SEARCH_STRING_ESCAPE;
    public static IRI SQL_KEYWORDS;
    public static IRI SQL_STATE_TYPE;
    public static IRI STRING_FUNCTIONS;
    public static IRI SYSTEM_FUNCTIONS;
    public static IRI TIME_DATE_FUNCTIONS;
    public static IRI URL;
    public static IRI USER_NAME;
    public static IRI CATALOG_AT_START;
    public static IRI READ_ONLY;
    public static IRI LOCATORS_UPDATE_COPY;
    public static IRI NULL_PLUS_NON_NULL_IS_NULL;
    public static IRI NULLS_ARE_SORTED_AT_END;
    public static IRI NULLS_ARE_SORTED_AT_START;
    public static IRI NULLS_ARE_SORTED_HIGH;
    public static IRI NULLS_ARE_SORTED_LOW;
    public static IRI STORES_LOWER_CASE_IDENTIFIERS;
    public static IRI STORES_LOWER_CASE_QUOTED_IDENTIFIERS;
    public static IRI STORES_MIXED_CASE_IDENTIFIERS;
    public static IRI STORES_MIXED_CASE_QUOTED_IDENTIFIERS;
    public static IRI STORES_UPPER_CASE_IDENTIFIERS;
    public static IRI STORES_UPPER_CASE_QUOTED_IDENTIFIERS;
    public static IRI SUPPORTS_ALTER_TABLE_WITH_ADD_COLUMN;
    public static IRI SUPPORTS_ALTER_TABLE_WITH_DROP_COLUMN;
    public static IRI SUPPORTS_ANSI92_ENTRY_LEVEL_SQL;
    public static IRI SUPPORTS_ANSI92_FULL_SQL;
    public static IRI SUPPORTS_ANSI92_INTERMEDIATE_SQL;
    public static IRI SUPPORTS_BATCH_UPDATES;
    public static IRI SUPPORTS_CATALOGS_IN_DATA_MANIPULATION;
    public static IRI SUPPORTS_CATALOGS_IN_INDEX_DEFINITIONS;
    public static IRI SUPPORTS_CATALOGS_IN_PRIVILEGE_DEFINITIONS;
    public static IRI SUPPORTS_CATALOGS_IN_PROCEDURE_CALLS;
    public static IRI SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS;
    public static IRI SUPPORTS_COLUMN_ALIASING;
    public static IRI SUPPORTS_CONVERT;
    public static IRI SUPPORTS_CORE_SQL_GRAMMAR;
    public static IRI SUPPORTS_CORRELATED_SUBQUERIES;
    public static IRI SUPPORTS_DATA_DEFINITION_AND_DATA_MANIPULATION_TRANSACTIONS;
    public static IRI SUPPORTS_DATA_MANIPULATION_TRANSACTIONS_ONLY;
    public static IRI SUPPORTS_DIFFERENT_TABLE_CORRELATION_NAMES;
    public static IRI SUPPORTS_EXPRESSIONS_IN_ORDER_BY;
    public static IRI SUPPORTS_EXTENDED_SQL_GRAMMAR;
    public static IRI SUPPORTS_FULL_OUTER_JOINS;
    public static IRI SUPPORTS_GET_GENERATED_KEYS;
    public static IRI SUPPORTS_GROUP_BY;
    public static IRI SUPPORTS_GROUP_BY_BEYOND_SELECT;
    public static IRI SUPPORTS_GROUP_BY_UNRELATED;
    public static IRI SUPPORTS_INTEGRITY_ENHANCEMENT_FACILITY;
    public static IRI SUPPORTS_LIKE_ESCAPE_CLAUSE;
    public static IRI SUPPORTS_LIMITED_OUTER_JOINS;
    public static IRI SUPPORTS_MINIMUM_SQL_GRAMMAR;
    public static IRI SUPPORTS_MIXED_CASE_IDENTIFIERS;
    public static IRI SUPPORTS_MIXED_CASE_QUOTED_IDENTIFIERS;
    public static IRI SUPPORTS_MULTIPLE_OPEN_RESULTS;
    public static IRI SUPPORTS_MULTIPLE_RESULT_SETS;
    public static IRI SUPPORTS_MULTIPLE_TRANSACTIONS;
    public static IRI SUPPORTS_NAMED_PARAMETERS;
    public static IRI SUPPORTS_NON_NULLABLE_COLUMNS;
    public static IRI SUPPORTS_OPEN_CURSORS_ACROSS_COMMIT;
    public static IRI SUPPORTS_OPEN_CURSORS_ACROSS_ROLLBACK;
    public static IRI SUPPORTS_OPEN_STATEMENTS_ACROSS_COMMIT;
    public static IRI SUPPORTS_OPEN_STATEMENTS_ACROSS_ROLLBACK;
    public static IRI SUPPORTS_ORDER_BY_UNRELATED;
    public static IRI SUPPORTS_OUTER_JOINS;
    public static IRI SUPPORTS_POSITIONED_DELETE;
    public static IRI SUPPORTS_POSITIONED_UPDATE;
    public static IRI SUPPORTS_SAVEPOINTS;
    public static IRI SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION;
    public static IRI SUPPORTS_SCHEMAS_IN_INDEX_DEFINITIONS;
    public static IRI SUPPORTS_SCHEMAS_IN_PRIVILEGE_DEFINITIONS;
    public static IRI SUPPORTS_SCHEMAS_IN_PROCEDURE_CALLS;
    public static IRI SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS;
    public static IRI SUPPORTS_SELECT_FOR_UPDATE;
    public static IRI SUPPORTS_STATEMENT_POOLING;
    public static IRI SUPPORTS_STORED_FUNCTIONS_USING_CALL_SYNTAX;
    public static IRI SUPPORTS_STORED_PROCEDURES;
    public static IRI SUPPORTS_SUBQUERIES_IN_COMPARISONS;
    public static IRI SUPPORTS_SUBQUERIES_IN_EXISTS;
    public static IRI SUPPORTS_SUBQUERIES_IN_INS;
    public static IRI SUPPORTS_SUBQUERIES_IN_QUANTIFIEDS;
    public static IRI SUPPORTS_TABLE_CORRELATION_NAMES;
    public static IRI SUPPORTS_TRANSACTIONS;
    public static IRI SUPPORTS_UNION;
    public static IRI SUPPORTS_UNION_ALL;
    public static IRI USES_LOCAL_FILE_PER_TABLE;
    public static IRI USES_LOCAL_FILES;

    static {
        final ValueFactory f = SimpleValueFactory.getInstance();

        ALL_PROCEEDURES_ARE_CALLABLE = f.createIRI(NAMESPACE, "allProceeduresAreCallable");
        ALL_TABLES_ARE_SELECTABLE = f.createIRI(NAMESPACE, "allTablesAreSelectable");
        AUTO_COMMIT_FAILURE_CLOSES_ALL_RESULTS_SETS = f.createIRI(NAMESPACE, "autoCommitFailureClosesAllResultsSets");
        DATA_DEFINITION_CAUSES_TRANSACTION_COMMIT = f.createIRI(NAMESPACE, "dataDefinitionCausesTransactionCommit");
        DATA_DEFINITION_IGNORED_IN_TRANSACTIONS = f.createIRI(NAMESPACE, "dataDefinitionIgnoredInTransactions");
        DOES_MAX_ROW_SIZE_INCLUDE_BLOBS = f.createIRI(NAMESPACE, "doesMaxRowSizeIncludeBlobs");
        JDBC_MAJOR_VERSION = f.createIRI(NAMESPACE, "jdbcMajorVersion");
        JDBC_MINOR_VERSION = f.createIRI(NAMESPACE, "jdbcMinorVersion");
        MAX_BINARY_LITERAL_LENGTH = f.createIRI(NAMESPACE, "maxBinaryLiteralLength");
        MAX_CATALOG_NAME_LENGTH = f.createIRI(NAMESPACE, "maxCatalogNameLength");
        MAX_CHAR_LITERAL_LENGTH = f.createIRI(NAMESPACE, "maxCharacterLiteralLength");
        MAX_COLUMN_NAME_LENGTH = f.createIRI(NAMESPACE, "maxColumnNameLength");
        MAX_COLUMNS_IN_GROUP_BY = f.createIRI(NAMESPACE, "maxColumnsInGroupBy");
        MAX_COLUMNS_IN_INDEX = f.createIRI(NAMESPACE, "maxColumnsInIndex");
        MAX_COLUMNS_IN_ORDER_BY = f.createIRI(NAMESPACE, "maxColumnsInOrderBy");
        MAX_COLUMNS_IN_SELECT = f.createIRI(NAMESPACE, "maxColumnsInSelect");
        MAX_COLUMNS_IN_TABLE = f.createIRI(NAMESPACE, "maxColumnsInTable");
        MAX_CONNECTIONS = f.createIRI(NAMESPACE, "maxConnections");
        DOES_MAX_ROW_SIZE_INCLUDE_BLOBS = f.createIRI(NAMESPACE, "doesMaxRowSizeIncludeBlobs");
        CATALOG_SEPARATOR = f.createIRI(NAMESPACE, "catalogSeparator");
        CATALOG_TERM = f.createIRI(NAMESPACE, "catalogTerm");
        DATABASE_MAJOR_VERSION = f.createIRI(NAMESPACE, "databaseMajorVersion");
        DATABASE_MINOR_VERSION = f.createIRI(NAMESPACE, "databaseMinorVersion");
        DATABASE_PRODUCT_NAME = f.createIRI(NAMESPACE, "databaseProductName");
        DATABASE_PRODUCT_VERSION = f.createIRI(NAMESPACE, "databaseProductVersion");
        DEFAULT_TRANSACTION_ISOLATION = f.createIRI(NAMESPACE, "defaultTransactionIsolation");
        DRIVER_MAJOR_VERSION = f.createIRI(NAMESPACE, "driverMajorVersion");
        DRIVER_MINOR_VERSION = f.createIRI(NAMESPACE, "driverMinorVersion");
        DRIVER_NAME = f.createIRI(NAMESPACE, "driverName");
        DRIVER_VERSION = f.createIRI(NAMESPACE, "driverVersion");
        EXTRA_NAME_CHARACTERS = f.createIRI(NAMESPACE, "extraNameCharacters");
        IDENTIFIER_QUOTE_STRING = f.createIRI(NAMESPACE, "identifierQuoteString");
        MAX_CURSOR_NAME_LENGTH = f.createIRI(NAMESPACE, "maxCursorNameLength");
        MAX_INDEX_LENGTH = f.createIRI(NAMESPACE, "maxIndexLength");
        MAX_PROCEDURE_NAME_LENGTH = f.createIRI(NAMESPACE, "maxProcedureNameLength");
        MAX_ROW_SIZE = f.createIRI(NAMESPACE, "maxRowSize");
        MAX_SCHEMA_NAME_LENGTH = f.createIRI(NAMESPACE, "maxSchemaName_length");
        MAX_STATEMENTLENGTH = f.createIRI(NAMESPACE, "maxStatementlength");
        MAX_STATEMENTS = f.createIRI(NAMESPACE, "maxStatements");
        MAX_TABLE_NAME_LENGTH = f.createIRI(NAMESPACE, "maxTableNameLength");
        MAX_TABLES_IN_SELECT = f.createIRI(NAMESPACE, "maxTablesInSelect");
        MAX_USER_NAME_LENGTH = f.createIRI(NAMESPACE, "maxUserNameLength");
        NUMERIC_FUNCTIONS = f.createIRI(NAMESPACE, "numericFunctions");
        PROCEDURE_TERM = f.createIRI(NAMESPACE, "procedureTerm");
        RESULT_SET_HOLDABILITY = f.createIRI(NAMESPACE, "resultSetHoldability");
        SCHEMA_TERM = f.createIRI(NAMESPACE, "schemaTerm");
        SEARCH_STRING_ESCAPE = f.createIRI(NAMESPACE, "searchStringEscape");
        SQL_KEYWORDS = f.createIRI(NAMESPACE, "sqlKeywords");
        SQL_STATE_TYPE = f.createIRI(NAMESPACE, "sqlStateType");
        STRING_FUNCTIONS = f.createIRI(NAMESPACE, "stringFunctions");
        SYSTEM_FUNCTIONS = f.createIRI(NAMESPACE, "systemFunctions");
        TIME_DATE_FUNCTIONS = f.createIRI(NAMESPACE, "timeDateFunctions");
        URL = f.createIRI(NAMESPACE, "url");
        USER_NAME = f.createIRI(NAMESPACE, "userName");
        CATALOG_AT_START = f.createIRI(NAMESPACE, "catalogAtStart");
        READ_ONLY = f.createIRI(NAMESPACE, "readOnly");
        LOCATORS_UPDATE_COPY = f.createIRI(NAMESPACE, "locatorsUpdateCopy");
        NULL_PLUS_NON_NULL_IS_NULL = f.createIRI(NAMESPACE, "nullPlusNonNullIsNull");
        NULLS_ARE_SORTED_AT_END = f.createIRI(NAMESPACE, "nullsAreSortedAtEnd");
        NULLS_ARE_SORTED_AT_START = f.createIRI(NAMESPACE, "nullsAreSortedAtStart");
        NULLS_ARE_SORTED_HIGH = f.createIRI(NAMESPACE, "nullsAreSortedHigh");
        NULLS_ARE_SORTED_LOW = f.createIRI(NAMESPACE, "nullsAreSortedLow");
        STORES_LOWER_CASE_IDENTIFIERS = f.createIRI(NAMESPACE, "storesLowerCaseIdentifiers");
        STORES_LOWER_CASE_QUOTED_IDENTIFIERS = f.createIRI(NAMESPACE, "storesLowerCaseQuotedIdentifiers");
        STORES_MIXED_CASE_IDENTIFIERS = f.createIRI(NAMESPACE, "storesMixedCaseIdentifiers");
        STORES_MIXED_CASE_QUOTED_IDENTIFIERS = f.createIRI(NAMESPACE, "storesMixedCaseQuotedIdentifiers");
        STORES_UPPER_CASE_IDENTIFIERS = f.createIRI(NAMESPACE, "storesUpperCaseIdentifiers");
        STORES_UPPER_CASE_QUOTED_IDENTIFIERS = f.createIRI(NAMESPACE, "storesUpperCaseQuotedIdentifiers");
        SUPPORTS_ALTER_TABLE_WITH_ADD_COLUMN = f.createIRI(NAMESPACE, "supportsAlterTableWithAddColumn");
        SUPPORTS_ALTER_TABLE_WITH_DROP_COLUMN = f.createIRI(NAMESPACE, "supportsAlterTableWithDropColumn");
        SUPPORTS_ANSI92_ENTRY_LEVEL_SQL = f.createIRI(NAMESPACE, "supportsAnsi92EntryLevelSql");
        SUPPORTS_ANSI92_FULL_SQL = f.createIRI(NAMESPACE, "supportsAnsi92FullSql");
        SUPPORTS_ANSI92_INTERMEDIATE_SQL = f.createIRI(NAMESPACE, "supportsAnsi92IntermediateSql");
        SUPPORTS_BATCH_UPDATES = f.createIRI(NAMESPACE, "supportsBatchUpdates");
        SUPPORTS_CATALOGS_IN_DATA_MANIPULATION = f.createIRI(NAMESPACE, "supportsCatalogsInDataManipulation");
        SUPPORTS_CATALOGS_IN_INDEX_DEFINITIONS = f.createIRI(NAMESPACE, "supportsCatalogsInIndexDefinitions");
        SUPPORTS_CATALOGS_IN_PRIVILEGE_DEFINITIONS = f.createIRI(NAMESPACE, "supportsCatalogsInPrivilegeDefinitions");
        SUPPORTS_CATALOGS_IN_PROCEDURE_CALLS = f.createIRI(NAMESPACE, "supportsCatalogsInProcedureCalls");
        SUPPORTS_CATALOGS_IN_TABLE_DEFINITIONS = f.createIRI(NAMESPACE, "supportsCatalogsInTableDefinitions");
        SUPPORTS_COLUMN_ALIASING = f.createIRI(NAMESPACE, "supportsColumnAliasing");
        SUPPORTS_CONVERT = f.createIRI(NAMESPACE, "supportsConvert");
        SUPPORTS_CORE_SQL_GRAMMAR = f.createIRI(NAMESPACE, "supportsCoreSql_grammar");
        SUPPORTS_CORRELATED_SUBQUERIES = f.createIRI(NAMESPACE, "supportsCorrelatedSubqueries");
        SUPPORTS_DATA_DEFINITION_AND_DATA_MANIPULATION_TRANSACTIONS = f.createIRI(NAMESPACE, "supportsDataDefinitionAndDataManipulationTransactions");
        SUPPORTS_DATA_MANIPULATION_TRANSACTIONS_ONLY = f.createIRI(NAMESPACE, "supportsDataManipulationTransactions_only");
        SUPPORTS_DIFFERENT_TABLE_CORRELATION_NAMES = f.createIRI(NAMESPACE, "supportsDifferentTableCorrelationNames");
        SUPPORTS_EXPRESSIONS_IN_ORDER_BY = f.createIRI(NAMESPACE, "supportsExpressionsInOrderBy");
        SUPPORTS_EXTENDED_SQL_GRAMMAR = f.createIRI(NAMESPACE, "supportsExtendedSqlGrammar");
        SUPPORTS_FULL_OUTER_JOINS = f.createIRI(NAMESPACE, "supportsFullOuterJoins");
        SUPPORTS_GET_GENERATED_KEYS = f.createIRI(NAMESPACE, "supportsGetGeneratedKeys");
        SUPPORTS_GROUP_BY = f.createIRI(NAMESPACE, "supportsGroupBy");
        SUPPORTS_GROUP_BY_BEYOND_SELECT = f.createIRI(NAMESPACE, "supportsGroupByBeyondSelect");
        SUPPORTS_GROUP_BY_UNRELATED = f.createIRI(NAMESPACE, "supportsGroupByUnrelated");
        SUPPORTS_INTEGRITY_ENHANCEMENT_FACILITY = f.createIRI(NAMESPACE, "supportsIntegrityEnhancementFacility");
        SUPPORTS_LIKE_ESCAPE_CLAUSE = f.createIRI(NAMESPACE, "supportsLikeEscapeClause");
        SUPPORTS_LIMITED_OUTER_JOINS = f.createIRI(NAMESPACE, "supportsLimitedouterJoins");
        SUPPORTS_MINIMUM_SQL_GRAMMAR = f.createIRI(NAMESPACE, "supportsMinimumSqlGrammar");
        SUPPORTS_MIXED_CASE_IDENTIFIERS = f.createIRI(NAMESPACE, "supportsMixedCaseIdentifiers");
        SUPPORTS_MIXED_CASE_QUOTED_IDENTIFIERS = f.createIRI(NAMESPACE, "supportsMixedCaseQuotedIdentifiers");
        SUPPORTS_MULTIPLE_OPEN_RESULTS = f.createIRI(NAMESPACE, "supportsMultipleOpenResults");
        SUPPORTS_MULTIPLE_RESULT_SETS = f.createIRI(NAMESPACE, "supportsMultipleResultSets");
        SUPPORTS_MULTIPLE_TRANSACTIONS = f.createIRI(NAMESPACE, "supportsMultipleTransactions");
        SUPPORTS_NAMED_PARAMETERS = f.createIRI(NAMESPACE, "supportsNamedParameters");
        SUPPORTS_NON_NULLABLE_COLUMNS = f.createIRI(NAMESPACE, "supportsNonNullableColumns");
        SUPPORTS_OPEN_CURSORS_ACROSS_COMMIT = f.createIRI(NAMESPACE, "supportsOpenCursorsAcrossCommit");
        SUPPORTS_OPEN_CURSORS_ACROSS_ROLLBACK = f.createIRI(NAMESPACE, "supportsOpenCursorsAcrossRollback");
        SUPPORTS_OPEN_STATEMENTS_ACROSS_COMMIT = f.createIRI(NAMESPACE, "supportsOpenStatementsAcrossCommit");
        SUPPORTS_OPEN_STATEMENTS_ACROSS_ROLLBACK = f.createIRI(NAMESPACE, "supportsOpenStatementsAcrossRollback");
        SUPPORTS_ORDER_BY_UNRELATED = f.createIRI(NAMESPACE, "supportsOrderByUnrelated");
        SUPPORTS_OUTER_JOINS = f.createIRI(NAMESPACE, "supportsOuterJoins");
        SUPPORTS_POSITIONED_DELETE = f.createIRI(NAMESPACE, "supportsPositionedDelete");
        SUPPORTS_POSITIONED_UPDATE = f.createIRI(NAMESPACE, "supportsPositionedUpdate");
        SUPPORTS_SAVEPOINTS = f.createIRI(NAMESPACE, "supportsSavepoints");
        SUPPORTS_SCHEMAS_IN_DATA_MANIPULATION = f.createIRI(NAMESPACE, "supportsSchemasInDataManipulation");
        SUPPORTS_SCHEMAS_IN_INDEX_DEFINITIONS = f.createIRI(NAMESPACE, "supportsSchemasInIndexDefinitions");
        SUPPORTS_SCHEMAS_IN_PRIVILEGE_DEFINITIONS = f.createIRI(NAMESPACE, "supportsSchemasInPrivilegeDefinitions");
        SUPPORTS_SCHEMAS_IN_PROCEDURE_CALLS = f.createIRI(NAMESPACE, "supportsSchemasInProcedureCalls");
        SUPPORTS_SCHEMAS_IN_TABLE_DEFINITIONS = f.createIRI(NAMESPACE, "supportsSchemasInTableDefinitions");
        SUPPORTS_SELECT_FOR_UPDATE = f.createIRI(NAMESPACE, "supportsSelectForUpdate");
        SUPPORTS_STATEMENT_POOLING = f.createIRI(NAMESPACE, "supportsStatementPooling");
        SUPPORTS_STORED_FUNCTIONS_USING_CALL_SYNTAX = f.createIRI(NAMESPACE, "supportsStoredFunctionsUsingCallSyntax");
        SUPPORTS_STORED_PROCEDURES = f.createIRI(NAMESPACE, "supportsStoredProcedures");
        SUPPORTS_SUBQUERIES_IN_COMPARISONS = f.createIRI(NAMESPACE, "supportsSubqueriesInComparisons");
        SUPPORTS_SUBQUERIES_IN_EXISTS = f.createIRI(NAMESPACE, "supportsSubqueriesInExists");
        SUPPORTS_SUBQUERIES_IN_INS = f.createIRI(NAMESPACE, "supportsSubqueriesInIns");
        SUPPORTS_SUBQUERIES_IN_QUANTIFIEDS = f.createIRI(NAMESPACE, "supportsSubqueriesInQuantifieds");
        SUPPORTS_TABLE_CORRELATION_NAMES = f.createIRI(NAMESPACE, "supportsTableCorrelationNames");
        SUPPORTS_TRANSACTIONS = f.createIRI(NAMESPACE, "supportsTransactions");
        SUPPORTS_UNION = f.createIRI(NAMESPACE, "supportsUnion");
        SUPPORTS_UNION_ALL = f.createIRI(NAMESPACE, "supportsUnionAll");
        USES_LOCAL_FILE_PER_TABLE = f.createIRI(NAMESPACE, "usesLocalFilePer_table");
        USES_LOCAL_FILES = f.createIRI(NAMESPACE, "usesLocalFiles");
    }
}
